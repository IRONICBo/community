import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"os"
	"regexp"
	"strconv"

	"github.com/goplus/community/internal/core"
	"github.com/goplus/community/translation"
	_ "github.com/joho/godotenv/autoload"
	gopaccountsdk "github.com/liuscraft/gop-casdoor-account-sdk"
	"github.com/qiniu/x/xlog"
	language "golang.org/x/text/language"
)

var (
	community *core.Community
	trans     *translation.Engine
)

const (
	limitConst      = 10
	mediaLimitConst = 8
	firstConst      = "1"
	labelConst      = "article"
)

todo := context.TODO()
endpoint := os.Getenv("GOP_COMMUNITY_ENDPOINT")
domain := os.Getenv("GOP_COMMUNITY_DOMAIN")
xLog := xlog.New("")

// Modify / to /static
// Support 404 handle
static "/static"

get "/success", ctx => {
	ctx.yap "2xx", {}
}

get "/error", ctx => {
	var user *core.User
	token, err := core.GetToken(ctx)
	if err == nil {
		user, _ = community.GetUser(token.Value)
	}

	ctx.yap "4xx", {
		"User": user,
	}
}

get "/failed", ctx => {
	var user *core.User
	token, err := core.GetToken(ctx)
	if err == nil {
		user, _ = community.GetUser(token.Value)
	}

	ctx.yap "5xx", {
		"User": user,
	}
}

// Home
get "/", ctx => {
	// Get User Info
	var user *core.User
	token, err := core.GetToken(ctx)
	if err == nil {
		user, _ = community.GetUser(token.Value)
	}
	// Get Article Info
	articles, next, err := community.ListArticle(todo, core.MarkBegin, limitConst, "", labelConst)
	if err != nil {
		xLog.Error("get article error:", err)
	}
	// articlesJson, err := json.Marshal(&articles)
	if err != nil {
		xLog.Error("json marshal error:", err)
	}
	ctx.yap "home", {
		"User":  user,
		"Items": articles,
		"Next":  next,
	}
}

// Article
//
// Article pages
get "/article/:id", ctx => {
	// todo middleware
	// Get User Info
	uid := ""

	var user *core.User
	token, err := core.GetToken(ctx)
	if err == nil {
		user, err = community.GetUser(token.Value)
		if err != nil {
			uid = user.Id
		}
	}

	id := ctx.param("id")
	platform := ctx.Param("platform")
	ip := community.GetClientIP(ctx.Request)
	community.ArticleLView(todo, id, ip, uid, platform)
	article, err := community.Article(todo, id)
	if err != nil {
		xLog.Error("get article error:", err)
		return
	}
	likeState, err := community.ArticleLikeState(todo, uid, id)
	if err != nil {
		xLog.Error("article state err:", err)
		return
	}
	// articleJson, _ := json.Marshal(&article)
	ctx.yap "article", {
		"User":      user,
		"Article":   article,
		"LikeState": likeState,
	}
}

get "/add", ctx => {
	var user *core.User
	token, err := core.GetToken(ctx)
	if err == nil {
		user, _ = community.GetUser(token.Value)
	}
	ctx.yap "edit", {
		"User": user,
	}
}

get "/edit/:id", ctx => {
	var user *core.User
	token, err := core.GetToken(ctx)
	if err == nil {
		user, _ = community.GetUser(token.Value)
	}

	uid := user.Id
	id := ctx.param("id")
	if id != "" {
		editable, err := community.CanEditable(todo, uid, id)
		if err != nil {
			xLog.Error("can editable error:", err)
			http.Redirect(ctx.ResponseWriter, ctx.Request, "/error", http.StatusTemporaryRedirect)
		}
		if !editable {
			xLog.Error("no permissions")
			http.Redirect(ctx.ResponseWriter, ctx.Request, "/error", http.StatusTemporaryRedirect)
		}
		article, err := community.Article(todo, id)
		if err != nil {
			xLog.Error("get article error:", err)
			http.Redirect(ctx.ResponseWriter, ctx.Request, "/error", http.StatusTemporaryRedirect)
		}
		// articleJson, err := json.Marshal(&article)
		if err != nil {
			xLog.Error("json marshal error:", err)
			http.Redirect(ctx.ResponseWriter, ctx.Request, "/error", http.StatusTemporaryRedirect)
		}
		ctx.yap "edit", {
			"User":    user,
			"Article": article,
		}
	}
}

get "/search", ctx => {
	searchValue := ctx.param("value")
	label := ctx.param("label")
	if label == "" {
		label = "article"
	}

	// todo middleware
	var user *core.User
	token, err := core.GetToken(ctx)
	if err == nil {
		user, _ = community.GetUser(token.Value)
	}

	articles, next, err := community.ListArticle(todo, core.MarkBegin, limitConst, searchValue, label)
	if err != nil {
		xLog.Error("get article error:", err)
	}
	// articlesJson, err := json.Marshal(&articles)
	if err != nil {
		xLog.Error("json marshal error:", err)
	}
	ctx.yap "home", {
		"User":  user,
		"Items": articles,
		"Value": searchValue,
		"Next":  next,
		"Tab":   label,
	}
}

// Article
//
// Article apis
get "/api/article/:id", ctx => {
	id := ctx.param("id")
	article, err := community.Article(todo, id)
	if err != nil {
		xLog.Error("get article error:", err)
		ctx.json {
			"code": 0,
			"err":  "get article failed",
		}
	}
	ctx.json {
		"code": 200,
		"data": article,
	}
}

delete "/api/article/:id", ctx => {
	id := ctx.param("id")
	token, err := core.GetToken(ctx)
	uid, err := community.ParseJwtToken(token.Value)
	if err != nil {
		xLog.Error("token parse error")
		ctx.json {
			"code": 0,
			"err":  err.Error(),
		}
	}
	err = community.DeleteArticle(todo, uid, id)
	if err != nil {
		ctx.json {
			"code": 0,
			"err":  "delete failed",
		}
	} else {
		ctx.json {
			"code": 200,
			"msg":  "delete success",
		}
	}
}

get "/api/articles", ctx => {
	from := ctx.param("from")
	limit := ctx.param("limit")
	searchValue := ctx.param("value")
	label := ctx.param("label")

	limitInt, err := strconv.Atoi(limit)
	if err != nil {
		limitInt = limitConst
	}
	// Get Article Info
	articles, next, err := community.ListArticle(todo, from, limitInt, searchValue, label)
	if err != nil {
		xLog.Error("get article error:", err)
		ctx.json {
			"code": 0,
			"err":  "get article failed",
		}
	}
	ctx.json {
		"code":  200,
		"items": articles,
		"next":  next,
		"value": searchValue,
	}
}

post "/api/article/commit", ctx => {
	id := ctx.param("id")
	content := ctx.param("content")
	title := ctx.param("title")
	tags := ctx.param("tags")
	abstract := ctx.param("abstract")
	label := ctx.param("label")
	trans, err := strconv.ParseBool(ctx.param("trans"))
	if err != nil {
		xLog.Error("parse bool error:", err)
	}
	// get user id
	token, err := core.GetToken(ctx)
	if err != nil {
		xLog.Info("token", err)
		ctx.json {
			"code": 0,
			"err":  "no token",
		}
	}
	uid, err := community.ParseJwtToken(token.Value)
	if err != nil {
		xLog.Info("uid", err)
		ctx.json {
			"code": 0,
			"err":  err.Error(),
		}
	}
	article := &core.Article{
		ArticleEntry: core.ArticleEntry{
			ID:       id,
			Title:    title,
			UId:      uid,
			Cover:    ctx.param("cover"),
			Tags:     tags,
			Abstract: abstract,
			Label:    label,
		},
		Content: content,
		Trans:   trans,
		Vtt_id:  ctx.param("vtt_id"),
	}

	// if trans == true translate the article
	if trans {
		article, _ = community.TranslateArticle(todo, article)
	}

	id, err = community.PutArticle(todo, uid, article)
	if err != nil {
		xLog.Info(err)
		ctx.json {
			"code": 0,
			"err":  "add failed",
		}
	}
	ctx.json {
		"code": 200,
		"data": id,
	}
}

// User
//
// User pages
get "/user/:id", ctx => {
	id := ctx.param("id")
	// Get current User Info by id
	userClaim, err := community.GetUserClaim(id)
	if err != nil {
		xLog.Error("get current user error:", err)
	}
	// get user by token
	var user *core.User
	token, err := core.GetToken(ctx)
	if err == nil {
		user, _ = community.GetUser(token.Value)
	}
	// get article list published by uid
	items, total, err := community.GetArticlesByUid(todo, id, firstConst, mediaLimitConst)
	if err != nil {
		xLog.Error("get article list error:", err)
	}
	ctx.yap "user", {
		"Id":          id,
		"CurrentUser": userClaim,
		"User":        user,
		"Items":       items,
		"Total":       total,
	}
}

get "/user/edit", ctx => {
	token, err := core.GetToken(ctx)
	if err != nil {
		xLog.Error("get token error:", err)
	}
	user, err := community.GetUser(token.Value)
	if err != nil {
		xLog.Info("get user error:", err)
		http.Redirect(ctx.ResponseWriter, ctx.Request, "/error", http.StatusTemporaryRedirect)
	}
	uid, err := community.ParseJwtToken(token.Value)
	if err != nil {
		xLog.Error("get uid error:", err)
		http.Redirect(ctx.ResponseWriter, ctx.Request, "/error", http.StatusTemporaryRedirect)
	}
	userClaim, err := community.GetUserClaim(uid)
	if err != nil {
		xLog.Error("get current user error:", err)
	}
	gac, err := gopaccountsdk.GetClient(token.Value)
	if err != nil {
		xLog.Info("gac", err)
		http.Redirect(ctx.ResponseWriter, ctx.Request, "/error", http.StatusTemporaryRedirect)
	}
	appInfo, err := community.GetApplicationInfo()
	if err != nil {
		xLog.Error("get application info error:", err)
		http.Redirect(ctx.ResponseWriter, ctx.Request, "/error", http.StatusTemporaryRedirect)
	}
	ctx.yap "user_edit", {
		"User":        user,
		"CurrentUser": userClaim,
		"Application": appInfo,
		"Binds":       gac.GetProviderBindStatus(),
	}
}

// User
//
// User apis
put "/api/user", ctx => {
	token, err := core.GetToken(ctx)
	uid, err := community.ParseJwtToken(token.Value)
	user := &core.UserInfo{
		Id:          uid,
		Name:        ctx.param("name"),
		Birthday:    ctx.param("birthday"),
		Gender:      ctx.param("gender"),
		Phone:       ctx.param("phone"),
		Email:       ctx.param("email"),
		Avatar:      ctx.param("avatar"),
		Owner:       ctx.param("owner"),
		DisplayName: ctx.param("displayName"),
	}
	// _, err = community.UpdateUserById(fmt.Sprintf("%s/%s", user.Owner, user.Name), user)
	_, err = community.UpdateUser(user)
	if err != nil {
		xLog.Info(err)
		ctx.json {
			"code": 0,
			"msg":  "update failed",
		}
	}
	ctx.json {
		"code": 200,
	}
}

get "/api/user/unlink", ctx => {
	pv := ctx.param("pv")
	token, err := core.GetToken(ctx)
	if err != nil {
		ctx.json {
			"code": 200,
		}
		return
	}
	switch pv {
	case "Twitter":
	case "Facebook":
	case "Github":
	case "WeChat":
	default:
		pv = ""
	}
	gac, err := gopaccountsdk.GetClient(token.Value)
	if err == nil {
		gac.UnLink(pv)
	}
	ctx.json {
		"code": 200,
	}
}

get "/api/user/:id/articles", ctx => {
	id := ctx.param("id")
	page := ctx.param("page")
	limit := ctx.param("limit")

	limitInt, err := strconv.Atoi(limit)
	if err != nil {
		limitInt = mediaLimitConst
	}
	items, total, err := community.GetArticlesByUid(todo, id, page, limitInt)
	if err != nil {
		xLog.Error("get article list error:", err)
		ctx.json {
			"code":  0,
			"err":   err.Error(),
			"total": 0,
		}
	}
	ctx.json {
		"code":  200,
		"items": items,
		"total": total,
	}
}

get "/api/user/:id/medias", ctx => {
	format := ctx.param("format")
	uid := ctx.param("id")
	page := ctx.param("page")
	limit := ctx.param("limit")

	limitInt, err := strconv.Atoi(limit)
	if err != nil {
		limitInt = mediaLimitConst
	}
	pageInt, err := strconv.Atoi(page)
	if err != nil {
		ctx.json {
			"code":  400,
			"total": 0,
			"err":   err.Error(),
		}
	}
	files, total, err := community.ListMediaByUserId(todo, uid, format, pageInt, limitInt)
	if err != nil {
		ctx.json {
			"code":  0,
			"total": total,
			"err":   err.Error(),
		}
	} else {
		ctx.json {
			"code":  200,
			"total": total,
			"items": files,
		}
	}
}

// Media
//
// Media apis
delete "/api/media/:id", ctx => {
	id := ctx.param("id")
	token, err := core.GetToken(ctx)
	uid, err := community.ParseJwtToken(token.Value)
	if err != nil {
		xLog.Error("token parse error")
		ctx.json {
			"code": 0,
			"err":  err.Error(),
		}
	}
	err = community.DelMedia(todo, uid, id)
	if err != nil {
		ctx.json {
			"code": 0,
			"err":  "delete failed",
		}
	} else {
		ctx.json {
			"code": 200,
			"msg":  "delete success",
		}
	}
}

get "/api/translation/:id", ctx => {
	id := ctx.param("id")
	article, err := community.GetTranslateArticle(todo, id)

	if err != nil {
		xLog.Info(err)
		ctx.json {
			"code": 0,
		}
	}
	ctx.json {
		"code":    200,
		"content": article.Content,
		"tags":    article.Tags,
		"title":   article.Title,
	}
}

post "/api/translation", ctx => {
	mdData := ctx.param("content")
	transData, err := community.TranslateMarkdownText(todo, mdData, "auto", language.English)
	if err != nil {
		ctx.json {
			"code": 500,
			"err":  err.Error(),
		}
	}
	ctx.json {
		"code": 200,
		"data": transData, // translation markdown content
	}
}

get "/api/media/:id/url", ctx => {
	id := ctx.param("id")
	fileKey, err := community.GetMediaUrl(todo, id)
	htmlUrl := fmt.Sprintf("%s%s", domain, fileKey)
	if err != nil {
		ctx.json {
			"code": 500,
			"err":  "have no html media",
		}
	}
	ctx.json {
		"code": 200,
		"url":  htmlUrl,
	}
}

get "/api/video/:id", ctx => {
	id := ctx.param("id")
	fileKey, err := community.GetMediaUrl(todo, id)
	m := make(map[string]string, 4)
	format, err := community.GetMediaType(todo, id)
	if err != nil {
		ctx.json {
			"code": 500,
			"err":  err.Error(),
		}
	}
	htmlUrl := fmt.Sprintf("%s%s", domain, fileKey)
	if err != nil {
		ctx.json {
			"code": 500,
			"err":  "have no html media",
		}
	}
	m["fileKey"] = htmlUrl
	m["type"] = format
	m["origin_vtt"] = domain + id
	m["translated_vtt"] = domain + id
	m["status"] = "0"
	match, _ := regexp.MatchString("^video", format)
	if match {
		subtitle, status, err := community.GetVideoSubtitle(todo, id)
		if err != nil {
			ctx.json {
				"code": 200,
				"url":  m,
			}
		}
		if status == "1" {
			m["subtitle"] = domain + subtitle
		}
		m["status"] = status
	}
	ctx.json {
		"code": 200,
		"url":  m,
	}
}

post "/api/media", ctx => {
	community.UploadFile(ctx)
}

post "/api/caption/task", ctx => {
	uid := ctx.param("uid")
	vid := ctx.param("vid")

	if uid == "" || vid == "" {
		ctx.json {
			"code": 200,
			"msg":  "Invalid param",
		}
	}

	if err := community.RetryCaptionGenerate(todo, uid, vid); err != nil {
		ctx.json {
			"code": 200,
			"msg":  "Request task error",
		}
	}

	ctx.json {
		"code": 200,
		"msg":  "Ok",
	}
}

// Account
//
// Account apis
get "/login", ctx => {
	// Get URL from query string
	// redirectURL := ctx.URL.Query().Get("redirect_url")
	// Get current request page URL from
	// Concatenate the current request page URL from refer
	refererURL, err := url.Parse(ctx.Request.Referer())
	if err != nil {
		xLog.Info("Error parsing Referer: %v", err)
		return
	}

	refererPath := refererURL.Path
	if refererURL.RawQuery != "" {
		refererPath = fmt.Sprintf("%s?%s", refererURL.Path, refererURL.RawQuery)
	}

	redirectURL := fmt.Sprintf("%s://%s/%s?origin_path=%s", refererURL.Scheme, refererURL.Host, "login/callback", url.QueryEscape(refererPath))

	loginURL := community.RedirectToCasdoor(redirectURL)
	ctx.Redirect loginURL, http.StatusFound
}

get "/logout", ctx => {
	err := core.RemoveToken(ctx)
	if err != nil {
		xLog.Error("remove token error:", err)
	}

	refererURL, err := url.Parse(ctx.Request.Referer())
	if err != nil {
		xLog.Info("Error parsing Referer: %v", err)
		return
	}

	refererPath := refererURL.Path
	if refererURL.RawQuery != "" {
		refererPath = fmt.Sprintf("%s?%s", refererURL.Path, refererURL.RawQuery)
	}

	http.Redirect(ctx.ResponseWriter, ctx.Request, refererPath, http.StatusFound)
}

get "/login/callback", ctx => {
	err := core.SetToken(ctx)
	if err != nil {
		xLog.Error("set token error:", err)
	}
	origin_path := ctx.URL.Query().Get("origin_path")
	unurl, err := url.QueryUnescape(origin_path)
	if err != nil {
		xLog.Info("Unurl error", err)
		unurl = "/"
	}

	http.Redirect(ctx.ResponseWriter, ctx.Request, unurl, http.StatusFound)
}

post "/api/article/like", ctx => {
	articleId := ctx.param("articleId")
	articleIdInt, err := strconv.Atoi(articleId)
	if err != nil {
		ctx.json {
			"code": 500,
			"err":  err.Error(),
		}
	}
	token, err := core.GetToken(ctx)
	if err != nil {
		xLog.Info("token", err)
		ctx.json {
			"code": 0,
			"err":  "no token",
		}
	}
	uid, err := community.ParseJwtToken(token.Value)
	if err != nil {
		ctx.json {
			"code": 0,
			"err":  err.Error(),
		}
	}
	res, err := community.ArticleLike(todo, articleIdInt, uid)
	if err != nil {
		ctx.json {
			"code": 500,
			"err":  err.Error(),
		}
	}
	ctx.json {
		"code": 200,
		"data": res,
	}
}

conf := &core.Config{}
community, _ = core.New(todo, conf)
core.CasdoorConfigInit()

// 404
handle "/", ctx => {
	ctx.yap "4xx", {}
}

xLog.Info "Started in endpoint: ", endpoint

// 500
run(endpoint, func(h http.Handler) http.Handler {

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		defer func() {

			if err := recover(); err != nil {
				xLog.Error(err)
				http.Redirect(w, r, "/failed", http.StatusFound)
			}
		}()

		h.ServeHTTP(w, r)
	})
})
